# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12QcbfGavOaIHhu7emXnYXpxNoR3CuAu9
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Load dataset
data = pd.read_csv('/content/heart.csv')

# Handle missing values
data.fillna(data.mean(), inplace=True)

# Remove outliers using Z-score
from scipy import stats
data = data[(np.abs(stats.zscore(data.select_dtypes(include=['float64', 'int64']))) < 3).all(axis=1)]

# Normalize or standardize features
scaler = StandardScaler()
scaled_features = scaler.fit_transform(data.drop('target', axis=1))

# Prepare dataset for modeling
X = scaled_features
y = data['target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_selection import RFE

model = RandomForestClassifier()
#rfe = RFE(model, 5)
rfe = RFE(estimator=model, n_features_to_select=5)
fit = rfe.fit(X_train, y_train)

selected_features = fit.support_
print("Selected Features:", selected_features)

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC

# Initialize models
models = {
    'Logistic Regression': LogisticRegression(),
    'Decision Tree': DecisionTreeClassifier(),
    'Random Forest': RandomForestClassifier(),
    'SVM': SVC()
}

# Train and evaluate models
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

results = {}
for name, model in models.items():
    model.fit(X_train, y_train)
    predictions = model.predict(X_test)
    results[name] = {
        'Accuracy': accuracy_score(y_test, predictions),
        'Precision': precision_score(y_test, predictions),
        'Recall': recall_score(y_test, predictions),
        'F1 Score': f1_score(y_test, predictions)
    }

print("Model Performance:")
for model_name, metrics in results.items():
    print(f"{model_name}: {metrics}")

from sklearn.model_selection import cross_val_score

for name, model in models.items():
    cv_scores = cross_val_score(model, X, y, cv=5)
    print(f"{name} CV Average Score: {cv_scores.mean()}")

from sklearn.model_selection import GridSearchCV

param_grid = {
    'n_estimators': [50, 100],
    'max_depth': [None, 10, 20]
}
grid_search = GridSearchCV(RandomForestClassifier(), param_grid, cv=5)
grid_search.fit(X_train, y_train)
best_model = grid_search.best_estimator_
print("Best Model:", best_model)

!pip install shap

import shap

explainer = shap.TreeExplainer(best_model)
shap_values = explainer.shap_values(X_test)

# Plot SHAP values
shap.summary_plot(shap_values, X_test)

!pip install -q streamlit

!pip install streamlit pyngrok

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# 
# st.title("Cardiovascular Disease Prediction System")
# 
# 
#

import streamlit as st

st.title("Cardiovascular Disease Prediction System")

# User inputs
age = st.number_input("Age")
gender = st.selectbox("Gender", ["Male", "Female"])
bmi = st.number_input("BMI")
blood_pressure = st.number_input("Blood Pressure")
cholesterol = st.number_input("Cholesterol Level")

# Prediction button
if st.button("Predict"):
    input_data = [[age, gender, bmi, blood_pressure, cholesterol]]
    input_data_scaled = scaler.transform(input_data)
    prediction = best_model.predict(input_data_scaled)
    st.write(f"Prediction: {'Disease' if prediction[0] == 1 else 'No Disease'}")